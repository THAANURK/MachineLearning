
"""
Created on Fri Apr 27 11:47:12 2018
@author: Shree Thaanu
@website: https://learnwiththanu.blogspot.in/
"""

import pandas as pd 
import quandl
import numpy as np
from sklearn import preprocessing, cross_validation, svm
from sklearn.linear_model import LinearRegression
import math
import datetime
import matplotlib.pyplot as plt
from matplotlib import style

# Quandl request and Api key
df = quandl.get("WIKI/GOOGL", api_key='o155rmoasQ4p5MGgGTVX')

# Taking the necessary data from dataset
df = df[['Adj. Open',  'Adj. High',  'Adj. Low',  'Adj. Close', 'Adj. Volume']]

# Calculating the percentage value for clear data
df['HL_PCT'] = (df['Adj. High'] - df['Adj. Low']) / df['Adj. Close'] * 100.0


df['PCT_change'] = (df['Adj. Close'] - df['Adj. Open']) / df['Adj. Open'] * 100.0

#Combine the calculated value with data set
df = df[['Adj. Close', 'HL_PCT', 'PCT_change', 'Adj. Volume']]

# showcase the dataset
print(df.head())

print("-"*10 + "here goes the machine learning algorithm" + "-"* 10)

# Training and testing the dataset

forecast_col = 'Adj. Close'

# Missing values are filed with static value 99,999 to overcome
df.fillna(value=-99999, inplace=True)

forecast_out = int(math.ceil(0.01 * len(df)))

df['label'] = df[forecast_col].shift(-forecast_out)

# Remove the NAN Value here
df.dropna(inplace=True)
print(df['label'])

X = np.array(df.drop(['label'], 1))
y = np.array(df['label'])

X = preprocessing.scale(X)
y = np.array(df['label'])
print(X)
print(y)

# Split training and testing data  -->  75% for training & 25% testing 
X_train, X_test, y_train, y_test = cross_validation.train_test_split(X, y, test_size=0.2)

# Use Suport vectar regressor - perfrom regression
clf = svm.SVR()
clf.fit(X_train, y_train)

# Test score of after training
confidence = clf.score(X_test, y_test)
clf = LinearRegression(n_jobs=-1)

# Try the other ML algorithms like this.
for k in ['linear','poly','rbf','sigmoid']:
    clf = svm.SVR(kernel=k)
    clf.fit(X_train, y_train)
    confidence = clf.score(X_test, y_test)
    print(k,confidence)
    
# Prediction of the remaining rate
X_lately = X[-forecast_out:]  
forecast_set = clf.predict(X_lately)

# Prediction Rate
print(forecast_set, confidence, forecast_out)

# Visualisation of predicted data
style.use('ggplot')

# Add a new column
df['Forecast'] = np.nan

# From the last 10% prediction use it to add the remaining
last_date = df.iloc[-1].name
last_unix = last_date.timestamp()

one_day = 86400
next_unix = last_unix + one_day

# Loop for next day --> 86,400 seconds per day calc 
for i in forecast_set:
    next_date = datetime.datetime.fromtimestamp(next_unix)
    next_unix += 86400
    df.loc[next_date] = [np.nan for _ in range(len(df.columns)-1)]+[i]

# Display thedataset
df['Adj. Close'].plot()
df['Forecast'].plot()

# Plot the graph with the forecast 
plt.legend(loc=4)
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()

